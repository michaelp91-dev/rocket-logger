const appVersion = '2.0.1';

const openWeatherApiKey = 'API_KEY_PLACEHOLDER';
const openWeatherApiUrl = 'https://api.openweathermap.org/data/2.5/weather';

let rocketList = [], engineList = [], flightLog = [], currentModalType = null, editingItemId = null, currentUpdateFlightId = null;

// --- ROCKET SCIENCE CLASSES ---
class Rocket {
    constructor(data) {
        this.dry_mass = parseFloat(data.dry_mass_g) / 1000.0; this.diameter = parseFloat(data.diameter_cm) / 100.0; this.radius = this.diameter / 2.0; this.nose_cone_type = data.nose_cone_type || 'ogive'; this.nose_cone_length = parseFloat(data.nose_cone_length_cm) / 100.0; this.cog = parseFloat(data.cog_cm) / 100.0; this.num_fins = parseInt(data.num_fins); this.fin_root_chord = parseFloat(data.fin_root_chord_cm) / 100.0; this.fin_tip_chord = parseFloat(data.fin_tip_chord_cm) / 100.0; this.fin_semi_span = parseFloat(data.fin_semi_span_cm) / 100.0; this.fin_sweep_dist = parseFloat(data.fin_sweep_dist_cm) / 100.0; this.nose_to_fin_dist = parseFloat(data.nose_to_fin_dist_cm) / 100.0; this.fin_mid_chord_length = this._calculate_mid_chord_length();
    }
    _calculate_mid_chord_length() { const x1 = 0, y1 = this.fin_root_chord / 2.0, x2 = this.fin_semi_span, y2 = (this.fin_tip_chord / 2.0) + this.fin_sweep_dist; return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2)); }
    calculate_cop() { const XN = this.nose_cone_type === 'cone' ? 0.666 : 0.466; const CN_N = 2.0; const CN_F = (1 + this.radius / (this.fin_semi_span + this.radius)) * (4 * this.num_fins * Math.pow(this.fin_semi_span / this.diameter, 2) / (1 + Math.sqrt(1 + Math.pow(2 * this.fin_mid_chord_length / (this.fin_root_chord + this.fin_tip_chord), 2)))); const XF = this.nose_to_fin_dist + (this.fin_sweep_dist / 3) * (this.fin_root_chord + 2 * this.fin_tip_chord) / (this.fin_root_chord + this.fin_tip_chord) + (1 / 6) * (this.fin_root_chord + this.fin_tip_chord - this.fin_root_chord * this.fin_tip_chord / (this.fin_root_chord + this.fin_tip_chord)); const CN_R = CN_N + CN_F; const nose_position = XN * this.nose_cone_length; return (CN_N * nose_position + CN_F * XF) / CN_R; }
}
class Motor {
    constructor(data) { this.initial_mass = parseFloat(data.motor_initial_mass_g) / 1000.0; this.propellant_mass = parseFloat(data.motor_propellant_mass_g) / 1000.0; this.avg_thrust = parseFloat(data.motor_avg_thrust_n); this.peak_thrust = parseFloat(data.motor_peak_thrust_n || data.motor_avg_thrust_n); this.peak_time = parseFloat(data.motor_peak_time_s || 0.1); this.burn_time = parseFloat(data.motor_burn_time_s); this.impulse = this.avg_thrust * this.burn_time; }
}

// --- DATA HANDLING ---
function loadAllData() { rocketList = JSON.parse(localStorage.getItem('rocketList')) || []; engineList = JSON.parse(localStorage.getItem('engineList')) || []; flightLog = JSON.parse(localStorage.getItem('flightLog')) || []; }
function saveAllData() { localStorage.setItem('rocketList', JSON.stringify(rocketList)); localStorage.setItem('engineList', JSON.stringify(engineList)); localStorage.setItem('flightLog', JSON.stringify(flightLog)); }

// --- DOM REFERENCES ---
const themeToggleBtn = document.getElementById('theme-toggle-btn'), sunIcon = document.getElementById('sun-icon'), moonIcon = document.getElementById('moon-icon'), manageModal = document.getElementById('manageModal'), preFlightModal = document.getElementById('preFlightModal'), flightLogModal = document.getElementById('flightLogModal'), updateFlightBtn = document.getElementById('updateFlightBtn'), updateFlightModal = document.getElementById('updateFlightModal'), updateFlightSelect = document.getElementById('updateFlightSelect'), weatherSection = document.getElementById('weatherSection'), postFlightSection = document.getElementById('postFlightSection'), getWeatherBtn = document.getElementById('getWeatherBtn'), weatherDisplay = document.getElementById('weatherDisplay'), saveUpdateBtn = document.getElementById('saveUpdateBtn');

// --- EVENT LISTENERS ---
document.getElementById('manageRocketsBtn').addEventListener('click', () => openManageModal('rocket'));
document.getElementById('manageEnginesBtn').addEventListener('click', () => openManageModal('engine'));
document.getElementById('startPreFlightBtn').addEventListener('click', openPreFlightModal);
document.getElementById('viewFlightLogBtn').addEventListener('click', openFlightLogModal);
document.querySelectorAll('.close-modal-btn').forEach(btn => btn.onclick = () => document.querySelectorAll('.modal').forEach(modal => modal.style.display = 'none'));
themeToggleBtn.addEventListener('click', () => { const isDark = document.documentElement.classList.toggle('dark'); const newTheme = isDark ? 'dark' : 'light'; localStorage.setItem('theme', newTheme); applyTheme(newTheme); });
updateFlightBtn.addEventListener('click', openUpdateFlightModal);
updateFlightSelect.addEventListener('change', handleUpdateFlightSelection);
getWeatherBtn.addEventListener('click', fetchAndDisplayWeather);
saveUpdateBtn.addEventListener('click', saveFlightUpdate);
document.getElementById('savePreFlightBtn').addEventListener('click', savePreFlight);
document.getElementById('itemList').addEventListener('click', handleItemListClick);
document.getElementById('newItemBtn').addEventListener('click', clearForm);
document.getElementById('saveItemBtn').addEventListener('click', saveItem);
document.getElementById('deleteItemBtn').addEventListener('click', deleteItem);


// --- UPDATE FLIGHT MODAL ---
function openUpdateFlightModal() { const pendingFlights = flightLog.filter(f => f.status === 'Pending'); updateFlightSelect.innerHTML = '<option value="">-- Select a Pending Flight --</option>'; pendingFlights.forEach(flight => { const option = document.createElement('option'); option.value = flight.id; option.textContent = `${flight.rocketName} / ${flight.engineName} (${new Date(flight.flightDate).toLocaleDateString()})`; updateFlightSelect.appendChild(option); }); weatherSection.classList.add('hidden'); postFlightSection.classList.add('hidden'); saveUpdateBtn.classList.add('hidden'); weatherDisplay.innerHTML = ''; updateFlightModal.style.display = 'block'; }
function handleUpdateFlightSelection() { currentUpdateFlightId = updateFlightSelect.value; if (!currentUpdateFlightId) { weatherSection.classList.add('hidden'); postFlightSection.classList.add('hidden'); saveUpdateBtn.classList.add('hidden'); return; } weatherSection.classList.remove('hidden'); postFlightSection.classList.remove('hidden'); saveUpdateBtn.classList.remove('hidden'); const flight = flightLog.find(f => f.id === currentUpdateFlightId); document.getElementById('flightStatus').value = flight.status === 'Pending' ? 'Success' : flight.status; document.getElementById('flightNotes').value = flight.notes || ''; document.getElementById('csvData').value = flight.rawData || ''; if (flight.weather) { displayWeatherInModal(flight.weather); } else { weatherDisplay.innerHTML = '<p class="text-gray-500">No weather data logged yet.</p>'; } }
function saveFlightUpdate() { if (!currentUpdateFlightId) return; const flight = flightLog.find(f => f.id === currentUpdateFlightId); flight.status = document.getElementById('flightStatus').value; flight.notes = document.getElementById('flightNotes').value; const csvText = document.getElementById('csvData').value.trim(); if (csvText) { flight.rawData = csvText; analyzeFlightData(currentUpdateFlightId); } else { saveAllData(); } updateFlightModal.style.display = 'none'; openFlightLogModal(); viewFlightDetails(currentUpdateFlightId); }

// --- WEATHER LOGIC ---
function fetchAndDisplayWeather() { if (!currentUpdateFlightId) return; weatherDisplay.innerHTML = '<p>Getting location...</p>'; if (navigator.geolocation) { navigator.geolocation.getCurrentPosition(onGeoSuccess, onGeoError); } else { weatherDisplay.innerHTML = '<p class="text-red-500">Geolocation not supported.</p>'; } }
function onGeoSuccess(position) { const { latitude, longitude } = position.coords; fetchWeatherByCoords(latitude, longitude); }
function onGeoError(error) { weatherDisplay.innerHTML = `<p class="text-red-500">Error: ${error.message}</p>`; }
async function fetchWeatherByCoords(lat, lon) { const url = `${openWeatherApiUrl}?lat=${lat}&lon=${lon}&appid=${openWeatherApiKey}&units=imperial`; try { const response = await fetch(url); if (!response.ok) throw new Error((await response.json()).message || 'Weather data not found.'); const data = await response.json(); const flight = flightLog.find(f => f.id === currentUpdateFlightId); if (flight) { flight.weather = data; saveAllData(); } displayWeatherInModal(data); } catch (error) { weatherDisplay.innerHTML = `<p class="text-red-500">Error: ${error.message}</p>`; } }
function displayWeatherInModal(data) { weatherDisplay.innerHTML = `<div class="grid grid-cols-2 gap-x-4 gap-y-1"><span><strong>Temp:</strong> ${Math.round(data.main.temp)}°F</span><span><strong>Feels Like:</strong> ${Math.round(data.main.feels_like)}°F</span><span class="capitalize"><strong>Condition:</strong> ${data.weather[0].description}</span><span><strong>Wind:</strong> ${Math.round(data.wind.speed)} mph</span><span><strong>Humidity:</strong> ${data.main.humidity}%</span><span><strong>Visibility:</strong> ${(data.visibility / 1609).toFixed(1)} mi</span></div>`; }

// --- FLIGHT LOG & PRE-FLIGHT ---
function openPreFlightModal() { populateSelect(document.getElementById('preFlightRocketSelect'), rocketList, 'rocket_name'); populateSelect(document.getElementById('preFlightEngineSelect'), engineList, 'motor_name'); preFlightModal.style.display = 'block'; }
function savePreFlight() { const rocketId = document.getElementById('preFlightRocketSelect').value, engineId = document.getElementById('preFlightEngineSelect').value, launchRodLength = parseFloat(document.getElementById('launchRodLength').value) || 1.0; if (!rocketId || !engineId) { showCustomAlert('Please select both a rocket and an engine.'); return; } const rocketData = rocketList.find(r => r.id === rocketId), engineData = engineList.find(e => e.id === engineId); const estimates = calculatePerformance(rocketData, engineData, launchRodLength); const newFlight = { id: Date.now().toString(), flightDate: new Date().toISOString(), rocketId, engineId, rocketName: rocketData.rocket_name, engineName: engineData.motor_name, launchRodLength, status: 'Pending', estimates, actuals: null, notes: '', rawData: '', weather: null }; flightLog.unshift(newFlight); saveAllData(); preFlightModal.style.display = 'none'; openFlightLogModal(); viewFlightDetails(newFlight.id); }
function openFlightLogModal() { populateFlightList(); document.getElementById('flightDetailsContainer').innerHTML = '<div class="text-center text-gray-500 dark:text-gray-400 p-8">Select a flight to view details.</div>'; document.getElementById('editFlightBtn').classList.add('hidden'); document.getElementById('deleteFlightBtn').classList.add('hidden'); flightLogModal.style.display = 'block'; }
function populateFlightList() { const listEl = document.getElementById('flightList'); listEl.innerHTML = ''; flightLog.forEach(flight => { const statusColor = flight.status === 'Success' ? 'text-green-500' : flight.status === 'Failure' ? 'text-red-500' : 'text-yellow-500'; const button = document.createElement('button'); button.className = 'item-list-button w-full text-left'; button.dataset.id = flight.id; button.innerHTML = `<div class="font-bold">${flight.rocketName} / ${flight.engineName}</div><div class="text-xs text-gray-500 dark:text-gray-400">${new Date(flight.flightDate).toLocaleString()}</div><div class="text-sm font-semibold ${statusColor}">${flight.status}</div>`; button.onclick = () => viewFlightDetails(flight.id); listEl.appendChild(button); }); }
function viewFlightDetails(flightId) { const flight = flightLog.find(f => f.id === flightId); const container = document.getElementById('flightDetailsContainer'); document.querySelectorAll('#flightList .item-list-button').forEach(btn => btn.classList.toggle('selected', btn.dataset.id === flightId)); document.getElementById('editFlightBtn').classList.add('hidden'); const deleteBtn = document.getElementById('deleteFlightBtn'); deleteBtn.classList.remove('hidden'); deleteBtn.onclick = () => deleteFlightLog(flightId); let weatherHtml = ''; if (flight.weather) { const weather = flight.weather; weatherHtml = `<div><h4 class="font-semibold text-cyan-600 dark:text-cyan-400 mb-2">Launch Conditions</h4><div class="grid grid-cols-2 md:grid-cols-3 gap-2 text-sm bg-gray-100 dark:bg-gray-800/50 p-3 rounded-lg"><span><strong>Temp:</strong> ${Math.round(weather.main.temp)}°F</span><span><strong>Feels Like:</strong> ${Math.round(weather.main.feels_like)}°F</span><span class="capitalize"><strong>Condition:</strong> ${weather.weather[0].description}</span><span><strong>Wind:</strong> ${Math.round(weather.wind.speed)} mph</span><span><strong>Humidity:</strong> ${weather.main.humidity}%</span><span><strong>Visibility:</strong> ${(weather.visibility / 1609).toFixed(1)} mi</span></div></div>`; } container.innerHTML = `<h3 class="text-xl font-bold">${flight.rocketName} with ${flight.engineName}</h3><p class="text-sm text-gray-500 dark:text-gray-400">Date: ${new Date(flight.flightDate).toLocaleString()}</p>${weatherHtml}<div class="space-y-4 bg-gray-100 dark:bg-gray-800/50 p-4 rounded-lg mt-4"><div><h4 class="font-semibold text-cyan-600 dark:text-cyan-400 mb-2">Pre-Flight Estimates</h4><p>Est. Altitude: <strong>${flight.estimates.total_altitude ? flight.estimates.total_altitude.toFixed(2) : 'N/A'} m</strong></p></div>${flight.status !== 'Pending' ? generatePostFlightReport(flight) : '<p class="text-center text-gray-500">This flight is pending.</p>'}</div>`; if (flight.status !== 'Pending' && flight.actuals) { setTimeout(() => renderCharts(flightId), 100); } }
function generatePostFlightReport(flight) { return `<div><h4 class="font-semibold text-cyan-600 dark:text-cyan-400 mb-2">Post-Flight Report</h4><p>Outcome: <strong class="${flight.status === 'Success' ? 'text-green-500' : 'text-red-500'}">${flight.status}</strong></p><p class="text-sm mt-2"><strong>Notes:</strong><br>${flight.notes.replace(/\n/g, '<br>') || 'No notes.'}</p></div>${flight.actuals ? `<div><h4 class="font-semibold text-cyan-600 dark:text-cyan-400 my-2">Actual Performance</h4><div class="grid grid-cols-3 gap-2 text-center"><div class="bg-gray-200 dark:bg-gray-700 p-2 rounded-lg"><h5 class="text-xs">Max Altitude</h5><p class="font-bold">${flight.actuals.maxAltitude.toFixed(2)} m</p></div><div class="bg-gray-200 dark:bg-gray-700 p-2 rounded-lg"><h5 class="text-xs">Max G-Force</h5><p class="font-bold">${flight.actuals.maxGForce.toFixed(2)} G</p></div><div class="bg-gray-200 dark:bg-gray-700 p-2 rounded-lg"><h5 class="text-xs">Top Speed</h5><p class="font-bold">${flight.actuals.maxVelocity.toFixed(2)} m/s</p></div></div><div class="mt-4"><canvas id="altitudeChart"></canvas></div><div class="mt-4"><canvas id="accelChart"></canvas></div></div>` : '<div><p>No flight computer data analyzed.</p></div>'}`; }
function deleteFlightLog(flightId) { if (!confirm('Are you sure you want to delete this flight log?')) return; flightLog = flightLog.filter(f => f.id !== flightId); saveAllData(); populateFlightList(); document.getElementById('flightDetailsContainer').innerHTML = '<div class="text-center text-gray-400 p-8">Select a flight...</div>'; document.getElementById('editFlightBtn').classList.add('hidden'); document.getElementById('deleteFlightBtn').classList.add('hidden'); }

// --- THEME & UI ---
function applyTheme(theme) { if (theme === 'dark') { document.documentElement.classList.add('dark'); sunIcon.classList.add('hidden'); moonIcon.classList.remove('hidden'); } else { document.documentElement.classList.remove('dark'); sunIcon.classList.remove('hidden'); moonIcon.classList.add('hidden'); } }
function showCustomAlert(message) { const modalHtml = `<div id="custom-alert-modal" class="fixed inset-0 bg-gray-900 bg-opacity-70 flex items-center justify-center p-4 z-[1000]"><div class="bg-white dark:bg-gray-800 p-6 rounded-lg shadow-xl max-w-sm w-full"><h4 class="text-lg font-bold text-gray-900 dark:text-white mb-4">Alert</h4><p class="text-sm text-gray-700 dark:text-gray-300 mb-6">${message}</p><div class="flex justify-end"><button onclick="document.getElementById('custom-alert-modal').remove();" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg">OK</button></div></div></div>`; document.body.insertAdjacentHTML('beforeend', modalHtml); }

// --- ROCKET/ENGINE MANAGEMENT ---
const rocketFormFields = [{id:'rocket_name',label:'Rocket Name',type:'text'},{id:'nose_cone_type',label:'Nose Cone Type',type:'select',options:[{value:'ogive',text:'Ogive (Curved)'},{value:'cone',text:'Cone (Straight)'}]},{id:'dry_mass_g',label:'Dry Mass (g)',type:'number'},{id:'length_cm',label:'Length (cm)',type:'number'},{id:'diameter_cm',label:'Diameter (cm)',type:'number'},{id:'nose_cone_length_cm',label:'Nose Cone Length (cm)',type:'number'},{id:'cog_cm',label:'Center of Gravity (cm)',type:'number'},{id:'num_fins',label:'Number of Fins',type:'number'},{id:'fin_root_chord_cm',label:'Root Chord (cm)',type:'number'},{id:'fin_tip_chord_cm',label:'Tip Chord (cm)',type:'number'},{id:'fin_semi_span_cm',label:'Semi-Span (cm)',type:'number'},{id:'fin_sweep_dist_cm',label:'Sweep Distance (cm)',type:'number'},{id:'nose_to_fin_dist_cm',label:'Nose Tip to Fin Root (cm)',type:'number'}];
const engineFormFields = [{id:'motor_name',label:'Engine Name',type:'text'},{id:'motor_initial_mass_g',label:'Initial Mass (g)',type:'number'},{id:'motor_propellant_mass_g',label:'Propellant Mass (g)',type:'number'},{id:'motor_avg_thrust_n',label:'Average Thrust (N)',type:'number'},{id:'motor_peak_thrust_n',label:'Peak Thrust (N)',type:'number'},{id:'motor_peak_time_s',label:'Time to Peak (s)',type:'number'},{id:'motor_burn_time_s',label:'Burn Time (s)',type:'number'}];
function generateFormHTML(fields){return fields.map(f=>{let i='';if(f.type==='select'){const o=f.options.map(p=>`<option value="${p.value}">${p.text}</option>`).join('');i=`<select id="${f.id}" class="bg-gray-200 dark:bg-gray-700 rounded p-2 w-full">${o}</select>`;}else{i=`<input id="${f.id}" type="${f.type}" class="bg-gray-200 dark:bg-gray-700 rounded p-2 w-full">`;}return `<div class="grid grid-cols-1 sm:grid-cols-[1fr_1.5fr] gap-1 sm:gap-2 items-center"><label for="${f.id}" class="text-left sm:text-right">${f.label}:</label>${i}</div>`}).join('')}
function openManageModal(type){currentModalType=type;const isRocket=type==='rocket';document.getElementById('modalTitle').textContent=isRocket?'Manage Rockets':'Manage Engines';document.getElementById('formContainer').innerHTML=generateFormHTML(isRocket?rocketFormFields:engineFormFields);populateModalList();clearForm();manageModal.style.display='block';}
function populateModalList(){const list=currentModalType==='rocket'?rocketList:engineList;const listEl=document.getElementById('itemList');listEl.innerHTML='';list.forEach(item=>{const btn=document.createElement('button');btn.className='item-list-button w-full text-left';btn.textContent=item.rocket_name||item.motor_name;btn.dataset.id=item.id;listEl.appendChild(btn);});}
function clearForm(){const fields=currentModalType==='rocket'?rocketFormFields:engineFormFields;fields.forEach(f=>document.getElementById(f.id).value='');editingItemId=null;document.getElementById('saveItemBtn').textContent='Save as New';document.getElementById('deleteItemBtn').classList.add('hidden');document.querySelectorAll('.item-list-button.selected').forEach(b=>b.classList.remove('selected'));}
function saveItem(){const list=currentModalType==='rocket'?rocketList:engineList;const fields=currentModalType==='rocket'?rocketFormFields:engineFormFields;const data={id:editingItemId||Date.now().toString()};for(const f of fields){const val=document.getElementById(f.id).value;if(!val){showCustomAlert(`Please fill out "${f.label}".`);return}data[f.id]=val}if(editingItemId){const idx=list.findIndex(i=>i.id===editingItemId);list[idx]=data}else{list.push(data)}saveAllData();manageModal.style.display='none'}
function deleteItem(){if(!editingItemId||!confirm('Are you sure?'))return;if(currentModalType==='rocket'){rocketList=rocketList.filter(i=>i.id!==editingItemId)}else{engineList=engineList.filter(i=>i.id!==editingItemId)}saveAllData();populateModalList();clearForm()}
function populateSelect(el,list,key){el.innerHTML='<option value="">-- Select --</option>';list.forEach(i=>{const o=document.createElement('option');o.value=i.id;o.textContent=i[key];el.appendChild(o)})}
function handleItemListClick(e){if(e.target.tagName==='BUTTON'){const id=e.target.dataset.id;const list=currentModalType==='rocket'?rocketList:engineList;const item=list.find(i=>i.id===id);if(item){const fields=currentModalType==='rocket'?rocketFormFields:engineFormFields;fields.forEach(f=>document.getElementById(f.id).value=item[f.id]||'');editingItemId=id;document.getElementById('saveItemBtn').textContent='Save Changes';document.getElementById('deleteItemBtn').classList.remove('hidden');document.querySelectorAll('.item-list-button.selected').forEach(b=>b.classList.remove('selected'));e.target.classList.add('selected');}}}

// --- FLIGHT ANALYSIS & PERFORMANCE ---
function analyzeFlightData(flightId){/* ... Original full function code ... */}
function renderCharts(flightId){/* ... Original full function code ... */}
function calculatePerformance(rocketData,engineData,launchRodLength=1.0){/* ... Original full function code ... */}

// --- INITIALIZATION ---
window.addEventListener('DOMContentLoaded',()=>{loadAllData();const theme=localStorage.getItem('theme')||(window.matchMedia('(prefers-color-scheme: dark)').matches?'dark':'light');applyTheme(theme);document.getElementById('app-footer').innerHTML=`Version ${appVersion} | ${new Date().toUTCString()}`;if('serviceWorker' in navigator){navigator.serviceWorker.register('/sw.js').catch(e=>console.log('SW reg failed'))}});
